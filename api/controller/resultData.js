
const models = require('../../models');
const jwt = require('jsonwebtoken');
const CONSTANT = require('../../utils/const');
// const paginationFUNC = require('../../utils/pagination'); // importing pagination function.
const sequelize = models.sequelize;
const Sequelize = models.Sequelize;
const Op = Sequelize.Op;


exports.createResults = async (req, res) => {
    // console.log(createDummyMatrix());
    const {adminData} = req.body;
    // console.log(adminData)
    var data = adminData;
    // var data = createDummyMatrix();
    let getNextTimeStampFromDataBase = await models.timePerMinutes.findOne({
        where: {
            is_active: 1
        }
    });
    let timeInMilliSec = getNextTimeStampFromDataBase.timeInMilliSec;
    console.log(timeInMilliSec)
    let checkMillisec = await models.resultsDatas.findOne({
        where:{
            timeInMilliSec
        }
    });
    console.log(checkMillisec)
    
    // console.log(checkMillisec.length)
    let createdTime = await models.resultsDatas.update({ isActive: 0 }, {
        where: {
            isActive: 1,
            // timeInMilliSec: timeInMilliSec
        }
    });
    if(checkMillisec){
        let storeResultsInToDataBase = await models.resultsDatas.update({ data, isActive: 1 },{
            where:{
                timeInMilliSec
            }
        });
    }else{
        let storeResultsInToDataBase = await models.resultsDatas.create({ data, timeInMilliSec, isActive: 1 });
    }
    
    // console.log(storeResultsInToDataBase);
    // console.log(getNextTimeStamp);
    // let minutes = (currentTime.getMinutes());
    // let timeInMilliSec = currentTime.getTime() + 15 * 60 * 1000;
    // console.log(timeInMilliSec)
    // let createdTime = await models.timePerMinutes.update({ timeInMilliSec, minutes }, {
    //     where: {
    //         id: 1,
    //     }
    // });
    // console.log(createdTime)
    if (!storeResultsInToDataBase == 1) {
        res.status(422).json({ message: "Results Not Created" });
    } else {
        res.status(201).json({ storeResultsInToDataBase, message: "Results Created Successfully" });
    }
};


exports.getResults = async (req, res) => {
    // console.log(createDummyMatrix());
    // var data = createDummyMatrix();
    let getNextTimeStampFromDataBase = await models.resultsDatas.findOne({
        where: {
            is_active: 1
        }
    });
    // let timeInMilliSec = getNextTimeStampFromDataBase.timeInMilliSec;
    // console.log(timeInMilliSec)
    // let createdTime = await models.resultsDatas.update({ isActive: 0 }, {
    //     where: {
    //         isActive: 1
    //     }
    // });
    // let storeResultsInToDataBase = await models.resultsDatas.create({ data, timeInMilliSec, isActive: 1 });
    // console.log(storeResultsInToDataBase);
    // console.log(getNextTimeStamp);
    // let minutes = (currentTime.getMinutes());
    // let timeInMilliSec = currentTime.getTime() + 15 * 60 * 1000;
    // console.log(timeInMilliSec)
    // let createdTime = await models.timePerMinutes.update({ timeInMilliSec, minutes }, {
    //     where: {
    //         id: 1,
    //     }
    // });
    // console.log(createdTime)
    if (! getNextTimeStampFromDataBase) {
        res.status(422).json({ message: "Results Not Created" });
    } else {
        res.status(201).json({ getNextTimeStampFromDataBase, message: "Results Created Successfully" });
    }
};
function createDummyMatrix(){
    matrix = []
    var n = 10;
        for (var i = 0; i < n; i++) {
            this.matrix[i] = [];
            for (var j = 0; j < n; j++) {
                matrix[i][j] = [i] + [j] + Math.floor(Math.random() * (99 - 10 + 1) + 10);
                // console.log(matrix[i][j])
            }
        }
        // console.log(this.state.Matrix.concat(this.matrix))
        // let autoGeneratedArray = this.state.Matrix.concat(this.matrix)
        // console.log(autoGeneratedArray)
        console.log(matrix)
        // console.log(this.state.Matrix)
        return matrix;
}